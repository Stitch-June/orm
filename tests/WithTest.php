<?php
/**
 * @author gaobinzhan <gaobinzhan@gmail.com>
 */


namespace EasySwoole\ORM\Tests;


use EasySwoole\ORM\Db\Config;
use EasySwoole\ORM\Db\Connection;
use EasySwoole\ORM\DbManager;
use EasySwoole\ORM\Tests\models\TestRelationModel;
use EasySwoole\ORM\Tests\models\TestUserListModel;
use PHPUnit\Framework\TestCase;


class WithTest extends TestCase
{
    /**
     * @var $connection Connection
     */
    protected $connection;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $config = new Config(MYSQL_CONFIG);
        $config->setReturnCollection(true);
        $this->connection = new Connection($config);
        DbManager::getInstance()->addConnection($this->connection);
        $connection = DbManager::getInstance()->getConnection();
        $this->assertTrue($connection === $this->connection);
    }

    public function testAdd()
    {
        $test_user_model = TestRelationModel::create();
        $test_user_model->name = 'gaobinzhan';
        $test_user_model->age = 20;
        $test_user_model->addTime = ($time = date('Y-m-d H:i:s'));
        $test_user_model->state = 2;
        $test_user_model->save();
        $user_list = TestUserListModel::create();
        $user_list->name = 'gaobinzhan';
        $user_list->age = 20;
        $user_list->addTime = $time;
        $user_list->state = 1;
        $user_list->save();

        $test_user_model = TestRelationModel::create();
        $test_user_model->name = 'gaobinzhan1';
        $test_user_model->age = 20;
        $test_user_model->addTime = ($time = date('Y-m-d H:i:s'));
        $test_user_model->state = 2;
        $test_user_model->save();
        $user_list = TestUserListModel::create();
        $user_list->name = 'gaobinzhan1';
        $user_list->age = 20;
        $user_list->addTime = $time;
        $user_list->state = 1;
        $user_list->save();
    }

    public function testHasOne()
    {
        $model = TestRelationModel::create();
        $result = $model->with(['hasOneEqName' => ['gaobinzhan1']])->where(['name' => 'gaobinzhan'])->get()->toArray(null, false);
        $this->assertEmpty($result['hasOneEqName']);
        $result = $model->with(['hasOneEqName' => ['gaobinzhan']])->where(['name' => 'gaobinzhan'])->get()->toArray(null, false);
        $this->assertEquals($result['hasOneEqName']['name'], 'gaobinzhan');

        $result = $model->where(['name' => 'gaobinzhan'])->get()->toArray(null,false);
        $this->assertFalse(isset($result['hasOneEqName']));
    }

    public function testHasMany()
    {
        $user_list = TestUserListModel::create();
        $user_list->name = 'gaobinzhan';
        $user_list->age = 20;
        $user_list->addTime = date('Y-m-d H:i:s');
        $user_list->state = 1;
        $user_list->save();

        $result = TestRelationModel::create()->with(['hasManyEqName' => ['gaobinzhan1']])->where(['name' => 'gaobinzhan'])->all()->toArray(null, false);
        $this->assertFalse(isset($result[0]['hasManyEqName']));

        $result = TestRelationModel::create()->with(['hasManyEqName' => ['gaobinzhan']])->where(['name' => 'gaobinzhan'])->all()->toArray(null, false);
        $this->assertEquals(count($result[0]['hasManyEqName']), 2);
        $this->assertEquals($result[0]['hasManyEqName'][0]['name'], 'gaobinzhan');
    }

    public function testDeleteAll()
    {
        $res = TestRelationModel::create()->destroy(null, true);
        $this->assertIsInt($res);
        $res = TestUserListModel::create()->destroy(null, true);
        $this->assertIsInt($res);
    }

}